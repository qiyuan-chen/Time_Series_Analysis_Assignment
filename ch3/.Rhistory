x = time(wages)
y = wages
result = linear_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
View(result)
# c
win.graph(12, 6, pointsize = 10)
plot(ts(e, start = start(wages), frequency = 12),
type = 'o',
pch = 21)
# 3.5
library(TSA)
library(matlib)
quadratic_model = function(x, y) {
ones = rep(1, length(x))
x_quad = x ^ 2
x = cbind(ones, x, x_quad)
#print(dim(x))
A=t(x) %*% x
A_star=adjoint(A)
A_inv=A_star * det(A)
mu = A_inv %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
lm2 = lm(wages ~ time(wages) + I(time(wages) ^ 2), singular.ok = FALSE)
x = time(wages)
y = wages
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
# 3.5
library(TSA)
library(matlib)
linear_model = function(x, y) {
ones = rep(1, length(x)) # 构造截距项
x = cbind(ones, x) # 将截距项和原数据合并
mu = solve(t(x) %*% x) %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
quadratic_model = function(x, y) {
ones = rep(1, length(x))
x_quad = x ^ 2
x = cbind(ones, x, x_quad)
#print(dim(x))
A = t(x) %*% x
A_star = adjoint(A)
A_inv = A_star / det(A)
mu = A_inv %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
# a
data("wages")
win.graph(width = 8,
height = 8,
pointsize = 10)
plot(
x = zlag(wages),
y = wages,
xlab = "Previous Year Wages",
ylab = "Wages"
)
win.graph(width = 12,
height = 6,
pointsize = 10)
plot(wages, type = 'o', pch = 21)
# b
x = time(wages)
y = wages
result = linear_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
# c
win.graph(12, 6, pointsize = 10)
plot(ts(e, start = start(wages), frequency = 12),
type = 'o',
pch = 21)
# d
lm2 = lm(wages ~ time(wages) + I(time(wages) ^ 2), singular.ok = FALSE)
x = time(wages)
y = wages
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
# e
win.graph(12, 6, pointsize = 10)
plot(ts(e, start = start(wages), frequency = 12),
type = 'o',
pch = 21)
x = time(wages)
y = wages
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
x = time(wages)
y = wages
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
x = time(wages)
y = wages
result = linear_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
win.graph(12, 6, pointsize = 10)
plot(ts(e, start = start(wages), frequency = 12),
type = 'o',
pch = 21)
quadratic_model = function(x, y) {
ones = rep(1, length(x))
x_quad = x ^ 2
x = cbind(ones, x, x_quad)
#print(dim(x))
A = t(x) %*% x
A_star = adjoint(A)
A_inv = A_star / det(A)
mu = A_inv %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
x = time(wages)
y = wages
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
x = time(wages)
y = wages
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
x = time(wages)
y = wages
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
x = time(wages)
y = wages
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
win.graph(12, 6, pointsize = 10)
plot(ts(e, start = start(wages), frequency = 12),
type = 'o',
pch = 21)
quadratic_model = function(x, y) {
ones = rep(1, length(x))
x_quad = x ^ 2
x = cbind(ones, x, x_quad)
#print(dim(x))
A = t(x) %*% x
A_star = adjoint(A)
A_inv = A_star / det(A)
mu = A_inv %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
x = time(wages)
y = wages
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
x = time(wages)
y = wages
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
e = y_num - y_hat
x_quad = x ^ 2
# 3.5
library(TSA)
library(matlib)
linear_model = function(x, y) {
ones = rep(1, length(x)) # 构造截距项
x = cbind(ones, x) # 将截距项和原数据合并
mu = solve(t(x) %*% x) %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
quadratic_model = function(x, y) {
ones = rep(1, length(x))
x_quad = x ^ 2
x = cbind(ones, x, x_quad)
#print(dim(x))
A = t(x) %*% x
A_star = adjoint(A)
A_inv = A_star / det(A)
mu = A_inv %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
# a
data("wages")
win.graph(width = 8,
height = 8,
pointsize = 10)
plot(
x = zlag(wages),
y = wages,
xlab = "Previous Year Wages",
ylab = "Wages"
)
win.graph(width = 12,
height = 6,
pointsize = 10)
plot(wages, type = 'o', pch = 21)
# b
x = time(wages)
y = wages
result = linear_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
# c
win.graph(12, 6, pointsize = 10)
plot(ts(e, start = start(wages), frequency = 12),
type = 'o',
pch = 21)
# d
x = time(wages)
y = wages
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
# e
win.graph(12, 6, pointsize = 10)
plot(ts(e, start = start(wages), frequency = 12),
type = 'o',
pch = 21)
lm2=lm(y~x+I(x^2))
quadratic_model = function(x, y) {
ones = rep(1, length(x))
x_quad = x ^ 2
x = cbind(ones, x, x_quad)
#print(dim(x))
A = t(x) %*% x
A_star = adjoint(A)
A_inv = A_star / abs(det(A))
mu = A_inv %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
x = time(wages)
y = wages
lm2=lm(y~x+I(x^2))
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
var(e)
# 3.5
library(TSA)
library(matlib)
linear_model = function(x, y) {
ones = rep(1, length(x)) # 构造截距项
x = cbind(ones, x) # 将截距项和原数据合并
mu = solve(t(x) %*% x) %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
quadratic_model = function(x, y) {
ones = rep(1, length(x))
x_quad = x ^ 2
x = cbind(ones, x, x_quad)
#print(dim(x))
A = t(x) %*% x
A_star = adjoint(A)
A_inv = A_star / abs(det(A))
mu = A_inv %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
# a
data("wages")
win.graph(width = 8,
height = 8,
pointsize = 10)
plot(
x = zlag(wages),
y = wages,
xlab = "Previous Year Wages",
ylab = "Wages"
)
win.graph(width = 12,
height = 6,
pointsize = 10)
plot(wages, type = 'o', pch = 21)
# b
x = time(wages)
y = wages
result = linear_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
# c
win.graph(12, 6, pointsize = 10)
plot(ts(e, start = start(wages), frequency = 12),
type = 'o',
pch = 21)
# d
x = time(wages)
y = wages
lm2=lm(y~x+I(x^2))
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
# e
win.graph(12, 6, pointsize = 10)
plot(ts(e, start = start(wages), frequency = 12),
type = 'o',
pch = 21)
# 3.5
library(TSA)
library(matlib)
linear_model = function(x, y) {
ones = rep(1, length(x)) # 构造截距项
x = cbind(ones, x) # 将截距项和原数据合并
mu = solve(t(x) %*% x) %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
quadratic_model = function(x, y) {
ones = rep(1, length(x))
x_quad = x ^ 2
x = cbind(ones, x, x_quad)
#print(dim(x))
A = t(x) %*% x
A_star = adjoint(A)
A_inv = A_star / abs(Det(A))
mu = A_inv %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
# a
data("wages")
win.graph(width = 8,
height = 8,
pointsize = 10)
plot(
x = zlag(wages),
y = wages,
xlab = "Previous Year Wages",
ylab = "Wages"
)
win.graph(width = 12,
height = 6,
pointsize = 10)
plot(wages, type = 'o', pch = 21)
# b
x = time(wages)
y = wages
result = linear_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
# c
win.graph(12, 6, pointsize = 10)
plot(ts(e, start = start(wages), frequency = 12),
type = 'o',
pch = 21)
# d
x = time(wages)
y = wages
lm2=lm(y~x+I(x^2))
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
# e
win.graph(12, 6, pointsize = 10)
plot(ts(e, start = start(wages), frequency = 12),
type = 'o',
pch = 21)
# 3.5
library(TSA)
library(matlib)
linear_model = function(x, y) {
ones = rep(1, length(x)) # 构造截距项
x = cbind(ones, x) # 将截距项和原数据合并
mu = solve(t(x) %*% x) %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
quadratic_model = function(x, y) {
ones = rep(1, length(x))
x_quad = x ^ 2
x = cbind(ones, x, x_quad)
#print(dim(x))
A = t(x) %*% x
A_star = adjoint(A)
A_inv = A_star / abs(Det(A))
mu = inv(A) %*% t(x) %*% y # 求参数
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
# a
data("wages")
win.graph(width = 8,
height = 8,
pointsize = 10)
plot(
x = zlag(wages),
y = wages,
xlab = "Previous Year Wages",
ylab = "Wages"
)
win.graph(width = 12,
height = 6,
pointsize = 10)
plot(wages, type = 'o', pch = 21)
# b
x = time(wages)
y = wages
result = linear_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
# c
win.graph(12, 6, pointsize = 10)
plot(ts(e, start = start(wages), frequency = 12),
type = 'o',
pch = 21)
# d
x = time(wages)
y = wages
lm2=lm(y~x+I(x^2))
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
mean(e)
var(e)
# e
win.graph(12, 6, pointsize = 10)
plot(ts(e, start = start(wages), frequency = 12),
type = 'o',
pch = 21)
quadratic_model = function(x, y) {
ones = rep(1, length(x))
x_quad = x ^ 2
x = cbind(ones, x, x_quad)
#print(dim(x))
A = t(x) %*% x
A_star = adjoint(A)
A_inv = A_star / abs(Det(A))
# mu = inv(A) %*% t(x) %*% y # 求参数
mu = qr.solve(x,y)
y_hat = x %*% mu # 预测
return(list(mu, y_hat))
}
x = time(wages)
y = wages
lm2=lm(y~x+I(x^2))
result = quadratic_model(x, y)
y_hat = result[[2]]
y_num = as.numeric(y) # 转换为数值
e = y_num - y_hat
help("qr.solve")
View(mu)
