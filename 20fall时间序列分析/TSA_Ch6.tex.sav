\documentclass[12pt,a4paper]{ctexart}
\usepackage{listings}
\usepackage{xcolor}
\usepackage{graphicx}
\usepackage{color}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{mathrsfs}
\usepackage{booktabs}
\usepackage{bm}

%%%%%%% 字体
\newcommand{\song}{\CJKfamily{song}}%? 宋体???(Windows自带simsun.ttf)?
\newcommand{\fs}{\CJKfamily{fs}}%? 仿宋体?(Windows自带simfs.ttf)?
\newcommand{\kai}{\CJKfamily{kai}}%? 楷体???(Windows 自带simkai.ttf)?
\newcommand{\hei}{\CJKfamily{hei}}%? 黑体???(Windows 自带simhei.ttf)?
\newcommand{\li}{\CJKfamily{li}}%? 隶书???(Windows自带simli.ttf)
%%%%%%%%%%%%%% 常用字体
\newcommand{\G}{\mathcal{G}}
\newcommand{\HH}{\mathcal{H}}
\newcommand{\cC}{\mathcal{C}}
\newcommand{\C}{\mathbb{C}}
\def\Arg{\textrm{Arg}}
\def\Re{\textrm{Re}}
\def\Im{\textrm{Im}}
\def\R{\mathbb{R}}
\def\Q{\mathbb{Q}}
\def\Z{\mathbb{Z}}
\def\ep{\epsilon}
\def\pt{\partial}
\def\supp{\textrm{supp\,}}
\def\pf{\noindent{\bf Proof.}~}

% 用来设置附录中代码的样式

\lstset{
    basicstyle          =   \scriptsize,          % 基本代码风格
    keywordstyle        =   \color{blue},          % 关键字风格
    commentstyle        =   \color[cmyk]{1,0,1,0},  % 注释的风格，斜体
    stringstyle         =   \ttfamily,  % 字符串风格
    flexiblecolumns,                % 别问为什么，加上这个
    numbers             =   left,   % 行号的位置在左边
    showspaces          =   false,  % 是否显示空格，显示了有点乱，所以不现实了
    numberstyle         =   \zihao{-5}\ttfamily,    % 行号的样式，小五号，tt等宽字体
    showstringspaces    =   false,
    captionpos          =   t,      % 这段代码的名字所呈现的位置，t指的是top上面
    frame               =   lrtb,   % 显示边框
    escapeinside        =   ``,
    breaklines          =   true,
    extendedchars=false, %解决代码跨页时，章节标题，页眉等汉字不显示的问题
    %xleftmargin=2em,xrightmargin=2em, aboveskip=1em, %设置边距
    tabsize=2, %设置tab空格数\
}

%%%%%%%% 文档页面设置
\textwidth=14.8cm \textheight=24cm
\oddsidemargin=15pt
\evensidemargin=15pt
\topmargin=-.25in
\parindent=22pt
\renewcommand{\baselinestretch}{1.5}

%%%%%%%% 标准尺寸, 不用管它
\makeatletter
\renewcommand\normalsize{%
   \@setfontsize\normalsize\@xpt\@xiipt
   \abovedisplayskip 1\p@ \@plus2\p@ \@minus5\p@
   \abovedisplayshortskip \z@ \@plus3\p@
   \belowdisplayshortskip 6\p@ \@plus3\p@ \@minus3\p@
   \belowdisplayskip \abovedisplayskip
   \let\@listi\@listI}
\makeatother

\allowdisplaybreaks[4]
\title{时间序列分析作业与第六次实验报告}
\author{姓名：康江睿 \\ 学号：2018213779\\ 指导老师： \ 张晓飞}
\date{\today}

\begin{document}
\maketitle
\zihao{-4}
\section{计算理论和样本自相关函数}
\subsection{函数acfun简介}
函数acfun实现了\\
(1)\quad 对给定参数的AR过程和MA过程的理论自相关函数的计算与可视化。
(2)\quad 对给定数据的样本自相关函数的计算与可视化。

代码如下：
\begin{lstlisting}[language=R]
acfun = function(data = NULL, model = NULL, model.para = NULL,
                 lag.max, plot = TRUE, lag0 = FALSE){
  library(ggplot2)
  if (is.null(model)){
    data = data-mean(data)
    n = length(data)
    SST = t(data)%*%data
    gamma = integer(lag.max)
    for (i in 1:lag.max){
      gamma[i] = t(head(data,-i))%*%tail(data,-i)
    }
    acfval = gamma/as.numeric(SST)
    acfstd = sqrt(1/n*(1+2*cumsum(acfval^2)))
    maxacf = round(10000*max(abs(acfval)))/10000

    if (plot==TRUE){
      if (lag0==TRUE){
        data = data.frame(lags = 0:lag.max, acfval = c(1, acfval))
        acfstd = c(0, acfstd)
        acfplot = ggplot(data, aes(x = lags,y = acfval))+
          geom_area(aes(x = lags, y = qnorm(0.975)*acfstd), fill = "#B9CFE7") +
          geom_area(aes(x = lags, y = -qnorm(0.975)*acfstd), fill = "#B9CFE7") +
          geom_segment(aes(x = lags, xend = lags, y = 0, yend = acfval))+
          geom_point(size = 2, color = "red")+
          scale_x_continuous("滞后数", breaks = seq(0,lag.max,2))+
          scale_y_continuous("自相关函数值", breaks = seq(-1,1,0.2))+
          ggtitle("ACF plot")
      }else{
        data = data.frame(lags = 1:lag.max, acfval = acfval)
        acfplot = ggplot(data, aes(x = lags,y = acfval))+
          geom_area(aes(x = lags, y = qnorm(0.975)*acfstd), fill = "#B9CFE7") +
          geom_area(aes(x = lags, y = -qnorm(0.975)*acfstd), fill = "#B9CFE7") +
          geom_segment(aes(x = lags, xend = lags, y = 0, yend = acfval))+
          geom_point(size = 2, color = "red")+
          scale_x_continuous("滞后数", breaks = seq(0,lag.max,2))+
          scale_y_continuous("自相关函数值", breaks = seq(-maxacf,maxacf,maxacf/5))+
          ggtitle("ACF plot")
      }
      result = list(acfval = acfval, acfplot = acfplot)
    }else{
      result = list(acfval = acfval)
    }
  }else{
    if (model=="AR"){
      l = length(model.para)
      M = matrix(NA, nrow = l, ncol = l+1)
      for (i in 1:l){
        v = integer(2*l-1)
        v[(l+1-i):(2*l-i)] = model.para
        M[i,] = c(v[l], rev(v[1:(l-1)])+v[(l+1):(2*l-1)], 0)
      }
      N = -M[,1]
      M = M[,2:(l+1)]-diag(x = 1, nrow = l)
      acfval = t(as.matrix(qr.solve(M, N)))
      ar = as.matrix(rev(model.para))
      for (i in (l+1):lag.max){
        acfval = cbind(acfval, t(tail(t(acfval), l))%*%ar)
      }
      acfval = as.vector(acfval)
      maxacf = round(10000*max(abs(acfval)))/10000
    }else if (model=="MA"){
      l = length(model.para)
      a = 1+sum(model.para^2)
      rho = integer(lag.max)
      for (i in 1:lag.max){
        if (i<l){
          v = c(-1, model.para[1:(l-i)])
          u = model.para[i:l]
          rho[i] = sum(v*u)/a
        }else if (i==l){
          rho[i] = -tail(model.para, 1)/a
        }else{
          rho[i] = 0
        }
      }
      acfval = rho
      maxacf = round(10000*max(abs(acfval)))/10000

    }
    for (i in 1:(l-1)){
      if (i==1){
        para = as.character(model.para[i])
      }else{
        para = paste(para, as.character(model.para[i]), sep = ",")
      }
    }
    para = paste(para, as.character(model.para[l]))
    if (plot==TRUE){
      if (lag0==TRUE){
        data = data.frame(lags = 0:lag.max, acfval = c(1, acfval))
        acfplot = ggplot(data, aes(x = lags,y = acfval))+
          geom_segment(aes(x = lags, xend = lags, y = 0, yend = acfval))+
          geom_point(size = 2, color = "red")+
          scale_x_continuous("滞后数", breaks = seq(0,lag.max,2))+
          scale_y_continuous("自相关函数值", breaks = seq(-1,1,0.2))+
          ggtitle(paste(c("ACF plot of"), model, c("["),
                        as.character(model.para), c("]")))
      }else{
        data = data.frame(lags = 1:lag.max, acfval = acfval)
        acfplot = ggplot(data, aes(x = lags,y = acfval))+
          geom_segment(aes(x = lags, xend = lags, y = 0, yend = acfval))+
          geom_point(size = 2, color = "red")+
          scale_x_continuous("滞后数", breaks = seq(0,lag.max,2))+
          scale_y_continuous("自相关函数值", breaks = seq(-maxacf,maxacf,maxacf/5))+
          ggtitle(paste(c("ACF plot of"), model, c("["),
                        para, c("]")))
      }
      result = list(acfval = acfval, acfplot = acfplot)
    }else{
      result = list(acfval = acfval)
    }
  }
  return(result)
}
\end{lstlisting}
\subsection{函数pacfun简介}
函数acfun实现了\\
(1)\quad 对给定参数的AR过程和MA过程的理论偏自相关函数的计算与可视化。
(2)\quad 对给定数据的样本偏自相关函数的计算与可视化。

代码如下：
\begin{lstlisting}[language=R]
pacfun = function(data = NULL, lag.max, plot = TRUE, method = NULL,
                  model = NULL, model.para = NULL){
  library(ggplot2)
  if (is.null(model)){
    result.acf = acfun(data = data, lag.max = lag.max, plot = FALSE)
    acfval = result.acf$acfval
    pacfval = integer(lag.max)
    if (is.null(method)|method=="system"){
      for (i in 1:lag.max){
        if (i==1){
          RHO = 1
          pacfval[1] = acfval[1]
        }else{
          RHO = rbind(c(1, acfval[1:(i-1)]), cbind(acfval[1:(i-1)], RHO))
          phi = qr.solve(RHO, acfval[1:i])
          pacfval[i] = tail(phi, 1)
        }
      }
    }else if (method=="iteration"){
      for (i in 1:lag.max){
        if (i==1){
          pacfval[1] = acfval[1]
          PHI = acfval[1]
        }else{
          pacfval[i] = (acfval[i]-PHI%*%rev(acfval[1:(i-1)]))/
            (1-PHI%*%acfval[1:(i-1)])
          PHI = PHI-pacfval[i]*rev(PHI)
          PHI = c(PHI, pacfval[i])
        }
      }
    }
    n = length(data)
    pacfstd = sqrt(1/n)
    maxpacf = round(10000*max(abs(pacfval)))/10000

    if (plot==TRUE){
      data = data.frame(lags = 1:lag.max, pacfval = pacfval)
      pacfplot = ggplot(data, aes(x = lags,y = pacfval))+
        geom_area(aes(x = lags, y = qnorm(0.975)*pacfstd), fill = "#B9CFE7") +
        geom_area(aes(x = lags, y = -qnorm(0.975)*pacfstd), fill = "#B9CFE7") +
        geom_segment(aes(x = lags, xend = lags, y = 0, yend = pacfval))+
        geom_point(size = 2, color = "red")+
        scale_x_continuous("滞后数", breaks = seq(0,lag.max,2))+
        scale_y_continuous("偏自相关函数值", breaks = seq(-maxpacf,maxpacf,maxpacf/5))+
        ggtitle("PACF plot")
      result = list(pacfval = pacfval, pacfplot = pacfplot)
    }else{
      result = list(pacfval = pacfval)
    }
  }else{
    result.acf = acfun(model = model, model.para = model.para,
                       lag.max = lag.max)
    acfval = result.acf$acfval
    pacfval = integer(lag.max)
    for (i in 1:lag.max){
      if (i==1){
        RHO = 1
        pacfval[1] = acfval[1]
      }else{
        RHO = rbind(c(1,acfval[1:(i-1)]), cbind(acfval[1:(i-1)], RHO))
        phi = qr.solve(RHO, acfval[1:i])
        pacfval[i] = tail(phi,1)
      }
    }
    maxpacf = round(10000*max(abs(pacfval)))/10000
    for (i in 1:(l-1)){
      if (i==1){
        para = as.character(model.para[i])
      }else{
        para = paste(para, as.character(model.para[i]), sep = ",")
      }
    }
    para = paste(para, as.character(model.para[l]))

    if (plot==TRUE){
      data = data.frame(lags = 1:lag.max, pacfval = pacfval)
      pacfplot = ggplot(data, aes(x = lags,y = pacfval))+
        geom_segment(aes(x = lags, xend = lags, y = 0, yend = pacfval))+
        geom_point(size = 2, color = "red")+
        scale_x_continuous("滞后数", breaks = seq(0,lag.max,2))+
        scale_y_continuous("偏自相关函数值", breaks = seq(-maxpacf,maxpacf,maxpacf/5))+
        ggtitle(paste(c("PACF plot of"), model, c("["),
                      para, c("]")))
      result = list(pacfval = pacfval, pacfplot = pacfplot)
    }else{
      result = list(pacfval = pacfval)
    }
  }

  return(result)
}
\end{lstlisting}
\subsection{函数使用说明}
对AR(p)过程，记为：
$$Y_t=\phi_1Y_{t-1}+\phi_2Y_{t-2}+\cdots+\phi_pY_{t-p}+e_t$$

对MA(q)过程，记为：
$$Y_t=e_t-\theta_1e_{t-1}-\cdots-\theta_qe_{t-q}$$

记$\bm{\phi}=[\phi_1,\phi_2,\cdots,\phi_p]$，$\bm{\theta}=[\theta_1,\theta_2,\cdots,\theta_q]$

\noindent(1)\quad 函数acfun的输入参数的名称与含义如下表：
\begin{table}[!htbp]
\centering
\begin{tabular}{@{\qquad}c@{\qquad\quad}c@{\qquad}}
\toprule
输入参数名称&含义\\\midrule
data&给定的（时间序列）数据\\
model&时间序列模型，"AR"或"MA"\\
model.para&参数集$\bm{\phi}$(AR)或$\bm{\theta}$(MA)\\
lag.max&最大滞后数\\
plot&画图选项\\
lag0&选择是否在图中绘制$\rho_0=1$的情况\\\midrule
\end{tabular}
\caption{函数acfun的输入参数的名称与含义}
\end{table}

\noindent(2)\quad 函数pacfun的输入参数的名称与含义如下表：
\begin{table}[!htbp]
\centering
\begin{tabular}{@{\qquad}c@{\qquad\quad}c@{\qquad}}
\toprule
输入参数名称&含义\\\midrule
data&给定的（时间序列）数据\\
model&时间序列模型，"AR"或"MA"\\
model.para&参数集$\bm{\phi}$(AR)或$\bm{\theta}$(MA)\\
lag.max&最大滞后数\\
plot&画图选项\\
method&计算样本偏相关函数的方式，"system"（默认）或"iteration"\\\midrule
\end{tabular}
\caption{函数pacfun的输入参数的名称与含义}
\end{table}

\noindent(3)\quad 输入参数plot和lag0都是布尔型变量。

\noindent(4)\quad 函数的输出参数都是列表。如果plot为TRUE，则列表包含lag.max阶滞后的（偏）自相关函数值和可视化结果；如果plot为FALSE，则列表只包含lag.max阶滞后的（偏）自相关函数值。

\noindent(5)\quad 函数pacfun需要调用函数acfun。

\noindent(6)\quad 注意：使用函数前请下载ggplot2程辑包。
\section{课后习题(6.24,6.25,6.27,6.28,6.33)}
在做习题之前，先导入必要的程辑包和函数：
\begin{lstlisting}[language=R]
> library(ggplot2)
> source('D:/R Files/TSAcourse/acfun.R', encoding = 'UTF-8')
> source('D:/R Files/TSAcourse/pacfun.R', encoding = 'UTF-8')
> source('D:/R Files/TSAcourse/simARIMA.R')
\end{lstlisting}

simARIMA是本次习题中用于模拟仿真的函数。
\subsection{习题6.24}
\noindent(a,b,c)\quad 实现的代码如下：
\begin{lstlisting}[language=R]
v24 = simARIMA(MA.para = 0.7, diff = 0, seq.length = 24)
v60 = simARIMA(MA.para = 0.7, diff = 0, seq.length = 60)
v120 = simARIMA(MA.para = 0.7, diff = 0, seq.length = 120)
rho = acfun(model = "MA", model.para = 0.7, lag.max = 1, plot = F)
r24 = acfun(data = v24, lag.max = 1, plot = F)
r60 = acfun(data = v60, lag.max = 1, plot = F)
r120 = acfun(data = v120, lag.max = 1, plot = F)
\end{lstlisting}

结果如下：
\begin{lstlisting}[language=R]
> rho
$acfval
[1] -0.4697987

> r24
$acfval
[1] -0.3494682

> r60
$acfval
[1] -0.5749973

> r120
$acfval
[1] -0.5074666
\end{lstlisting}

\noindent(d)\quad 可以发现，对于越大的n，$\rho_1$的估计值离理论值越接近。

量化图表如下：
\begin{table}[!htbp]
\centering
\begin{tabular}{@{\qquad}c@{\qquad\quad}c@{\qquad\quad}c@{\qquad\quad}c@{\qquad}}
\toprule
n&$\sqrt{Var(r_1)}$&$\sqrt{Var(r_k)},k>1$&$Corr(r_1,r_2)$\\\midrule
24&0.1490&0.2490&-0.84\\
60&0.0942&0.1575&-0.84\\
120&0.0666&0.1114&-0.84\\\midrule
\end{tabular}
\caption{参数为0.7的MA(1)模型选定的$r_k$的大样本结果}
\end{table}

由表可知，随着样本容量的增加，估计的精度逐渐提升。
\subsection{习题6.25}
实现的代码如下：
\begin{lstlisting}[language=R]
> rho
$acfval
[1] -0.4697987

> r24
$acfval
[1] -0.3494682

> r60
$acfval
[1] -0.5749973

> r120
$acfval
[1] -0.5074666
\end{lstlisting}

\noindent(a)\quad 
\subsection{习题6.27}

\subsection{习题6.28}

\subsection{习题6.33}
\end{document}