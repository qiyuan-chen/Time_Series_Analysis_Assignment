y = c(0.9,1.1,4.8,3.2,7.8,2.7,1.6,12.5,1.0,2.6,0.3,4.0,
0.8,3.5,10.2,3.0,0.2,0.4,1.0,6.8,11.6,1.6,1.2,7.2,3.2)
x1 = c(67.3,111.3,173.0,80.8,199.7,16.2,107.4,185.4,96.1,72.8,64.2,132.2,58.6,
174.6,263.5,79.3,14.8,73.5,24.7,139.4,368.2,95.7,109.6,196.2,102.2)
y = c(0.9,1.1,4.8,3.2,7.8,2.7,1.6,12.5,1.0,2.6,0.3,4.0,
0.8,3.5,10.2,3.0,0.2,0.4,1.0,6.8,11.6,1.6,1.2,7.2,3.2)
x1 = c(67.3,111.3,173.0,80.8,199.7,16.2,107.4,185.4,96.1,72.8,64.2,132.2,58.6,
174.6,263.5,79.3,14.8,73.5,24.7,139.4,368.2,95.7,109.6,196.2,102.2)
x2 = c(6.8,19.8,7.7,7.2,16.5,2.2,10.7,27.1,1.7,9.1,2.1,11.2,6.0,
12.7,15.6,8.9,0.6,5.9,5.0,7.2,16.8,3.8,10.3,15.8,12.0)
x3 = c(5,16,17,10,19,1,17,18,10,14,11,23,14,
26,34,15,2,11,4,28,32,10,14,16,10)
y = c(0.9,1.1,4.8,3.2,7.8,2.7,1.6,12.5,1.0,2.6,0.3,4.0,
0.8,3.5,10.2,3.0,0.2,0.4,1.0,6.8,11.6,1.6,1.2,7.2,3.2)
x1 = c(67.3,111.3,173.0,80.8,199.7,16.2,107.4,185.4,96.1,72.8,64.2,132.2,58.6,
174.6,263.5,79.3,14.8,73.5,24.7,139.4,368.2,95.7,109.6,196.2,102.2)
x2 = c(6.8,19.8,7.7,7.2,16.5,2.2,10.7,27.1,1.7,9.1,2.1,11.2,6.0,
12.7,15.6,8.9,0.6,5.9,5.0,7.2,16.8,3.8,10.3,15.8,12.0)
x3 = c(5,16,17,10,19,1,17,18,10,14,11,23,14,
26,34,15,2,11,4,28,32,10,14,16,10)
x4 = c(51.9,90.9,73.7,14.5,63.2,2.2,20.2,43.8,55.9,64.3,42.7,76.7,22.8,
117.1,146.7,29.9,42.1,25.3,13.4,64.3,163.9,44.5,67.9,39.7,97.1)
y = c(0.9,1.1,4.8,3.2,7.8,2.7,1.6,12.5,1.0,2.6,0.3,4.0,
0.8,3.5,10.2,3.0,0.2,0.4,1.0,6.8,11.6,1.6,1.2,7.2,3.2)
x1 = c(67.3,111.3,173.0,80.8,199.7,16.2,107.4,185.4,96.1,72.8,64.2,132.2,58.6,
174.6,263.5,79.3,14.8,73.5,24.7,139.4,368.2,95.7,109.6,196.2,102.2)
x2 = c(6.8,19.8,7.7,7.2,16.5,2.2,10.7,27.1,1.7,9.1,2.1,11.2,6.0,
12.7,15.6,8.9,0.6,5.9,5.0,7.2,16.8,3.8,10.3,15.8,12.0)
x3 = c(5,16,17,10,19,1,17,18,10,14,11,23,14,
26,34,15,2,11,4,28,32,10,14,16,10)
x4 = c(51.9,90.9,73.7,14.5,63.2,2.2,20.2,43.8,55.9,64.3,42.7,76.7,22.8,
117.1,146.7,29.9,42.1,25.3,13.4,64.3,163.9,44.5,67.9,39.7,97.1)
data = data.frame(y = y,
x1 = x1,
x2 = x2,
x3 = x3,
x)
source("C:/Users/user/Desktop/reg.R", echo=TRUE)
View(data)
# 1
cor(x=data[2:5],y=data[1])
lm1 = lm(y ~ x1 + x2 + x3 + x4, data = data)
View(lm1)
lm1 = lm(y ~ x1 + x2 + x3 + x4, data = data)
lm1$coefficients
data_scaled = scale(data[2:5])
c=solve(t(data_scaled)%*%data_scaled)
c = solve(t(data_scaled) %*% data_scaled)
View(c)
View(data_scaled)
cor(data_scaled)
cor_matrix=cor(data_scaled)
solve(cor_matrix)
t(data_scaled) %*% data_scaled
View(data_scaled)
View(data)
View(data_scaled)
eigen(t(data[2:5])%*%data[2:5])
x=t(data[2:5])%*%data[2:5]
x_left=data[2:5]
x=t(x_left)%*%x_left
x=t(x_left)%*%x_left
x_left=as.matrix(data[2:5])
x=t(x_left)%*%x_left
eigen(x)
x1=c(35,40,40,42,37,45,43,37,44,42)
x2=c(60,74,64,71,72,68,78,66,70,65)
y=c(1600,2600,2100,2650,2400,2200,2750,1600,2750,2500)
x1=c(35,40,40,42,37,45,43,37,44,42)
x2=c(60,74,64,71,72,68,78,66,70,65)
y=c(1600,2600,2100,2650,2400,2200,2750,1600,2750,2500)
plot(x1,y)
win.graph(5,5,5)
plot(x1,y)
win.graph(5,5,15)
plot(x1,y)
win.graph(8,8,15)
plot(x1,y)
cor.test(x1,y)
cor.test(x2,y)
x1=c(35,40,40,42,37,45,43,37,44,42)
x2=c(60,74,64,71,72,68,78,66,70,65)
y=c(1600,2600,2100,2650,2400,2200,2750,1600,2750,2500)
win.graph(8,8,15)
plot(x1,y)
win.graph(8,8,15)
plot(x2,y)
cor.test(x1,y)
cor(x1,y)
cor.test(x2,y)
x=c(20,25,30,35,40,45,50,55,60,65)
y=c(13.2,15.1,16.4,17.1,17.9,18.7,19.6,21.2,22.5,24.3)
# 1)
model=lm(y~x)
# 1)
model = lm(y ~ x)
# 2)
summary(model)
# 3)
pred = predict(model, 42, interval = "prediction", level = 0.95)
x = c(20, 25, 30, 35, 40, 45, 50, 55, 60, 65)
y = c(13.2, 15.1, 16.4, 17.1, 17.9, 18.7, 19.6, 21.2, 22.5, 24.3)
# 1)
model = lm(y ~ x)
# 2)
summary(model)
# 3)
pred = predict(model, 42, interval = "prediction", level = 0.95)
# 3)
pred = predict(model, c(42), interval = "prediction", level = 0.95)
# 3)
pred = predict(model, list(42), interval = "prediction", level = 0.95)
# 3)
(pred = predict(model, list(42), interval = "prediction", level = 0.95))
# 9.2
x = c(20, 25, 30, 35, 40, 45, 50, 55, 60, 65)
y = c(13.2, 15.1, 16.4, 17.1, 17.9, 18.7, 19.6, 21.2, 22.5, 24.3)
# 1)
model = lm(y ~ x)
# 2)
summary(model)
# 3)
point = data.frame(x = 42)
(pred = predict(model, point, interval = "prediction", level = 0.95))
library(TSA)
data("airpass")
plot(airpass, type = "o")
log_SP = log(airpass)
plot(log_SP, type = "o")
change_rate=(tail(airpass,-1)-head(airpass,-1))/head(airpass,-1)
diff_log=log(tail(airpass,-1))-log(head(airpass,-1))
cor(change_rate,diff_log)
# 输出：[1] 0.9963424
plot(change_rate,type = "o",pch = 15,xlab = "Time",ylab = "Value")
plot(diff_log,type = "o",pch = 15,xlab = "Time",ylab = "Value")
plot(change_rate,type = "o",pch = 15,col = "blue",
xlab = "Time",ylab = "Value")
points(1:143, diff_log, pch = 16, col = "red")
lines(diff_log, col = "red", lty = 3)
legend (100,0.3,c("change_rate", "diff_log"),col = c("blue", "red"),
text.col = c("blue", "red"),lty = c(1, 2))
# 回归作业
# 9.3
x=c(4.2,4.06,3.8,3.6,3.4,3.2,3.0,2.8,2.6,2.4,2.2,2,1.8,1.6,1.4)
y=c(0.086,0.09,0.1,0.12,0.13,0.15,0.17,0.19,0.22,0.24,0.35,0.44,0.62,0.94,1.62)
#1)
x_frac=1/x
y_ln=ln(y)
y_ln=ln(y)
y_ln=log(y)
summary(model1)
model1=lm(y_ln~x_frac)
summary(model1)
exp(-3.85598)
# 2)
nls(y~a*exp(b/x),start=list(0,6))
# 2)
nls(y~a*exp(b/x),start=list(a=0,b=6))
# 2)
nls(y~a*exp(b*x_frac),start=list(a=0,b=6))
# 2)
nls2(y~a*exp(b*x_frac),start=list(a=0,b=6))
# 2)
nls(y~a*exp(b*x_frac),start=list(a=0.02,b=6.08))
# 2)
nls(y~a*exp(b/x),start=list(a=0.02,b=6.08))
source("./sm_series.R") # 导入模拟生成序列的函数
getwd()
ls
setwd("C:\Users\user\Desktop\Time_Series_Analysis_Assignment\ch6")
setwd("C:/Users/user/Desktop/Time_Series_Analysis_Assignment/ch6")
source("./sm_series.R") # 导入模拟生成序列的函数
source("./acf_func.R") # 导入计算理论、样本自相关函数
set.seed(666) # 设置随机种子以保证结果可复现
# (a)
sm_series1 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 24)
rho1 = MA_thm_acf(c(0.7))
View(MA_thm_acf)
sm_series1 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 24)
rho1 = MA_thm_acf(c(0.7))
sm_series1 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 24)
rho1 = MA_thm_acf(c(0.7))
set.seed(666) # 设置随机种子以保证结果可复现
source("./sm_series.R") # 导入模拟生成序列的函数
source("./acf_func.R") # 导入计算理论、样本自相关函数
set.seed(666) # 设置随机种子以保证结果可复现
# (a)
sm_series1 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 24)
rho1 = MA_thm_acf(c(0.7))
sm_series1 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 24)
rho1 = MA_thm_acf(c(0.7))
source("./sm_series.R") # 导入模拟生成序列的函数
source("./acf_func.R") # 导入计算理论、样本自相关函数
set.seed(666) # 设置随机种子以保证结果可复现
# (a)
sm_series1 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 24)
rho1 = MA_thm_acf(c(0.7))
r1 = acf_func(sm_series1)
sm_series3 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 120)
r3 = acf_func(sm_series3)
sm_series3 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 240)
r3 = acf_func(sm_series3)
sm_series3 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 1000)
r3 = acf_func(sm_series3)
set.seed(172534) # 设置随机种子以保证结果可复现
# (a)
sm_series1 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 24)
rho1 = MA_thm_acf(c(0.7))
r1 = acf_func(sm_series1)
sm_series3 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 120)
r3 = acf_func(sm_series3)
source("./sm_series.R") # 导入模拟生成序列的函数
source("./acf_func.R") # 导入计算理论、样本自相关函数
set.seed(172534) # 设置随机种子以保证结果可复现
# (a)
sm_series1 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 24)
rho1 = MA_thm_acf(c(0.7))
r1 = acf_func(sm_series1)
# (b)
sm_series2 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 60)
rho2 = MA_thm_acf(c(0.7))
r2 = acf_func(sm_series2)
# (c)
sm_series3 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 120)
rho3 = MA_thm_acf(c(0.7))
r3 = acf_func(sm_series3)
source("./sm_series.R") # 导入模拟生成序列的函数
source("./acf_func.R") # 导入计算理论、样本自相关函数
set.seed(666) # 设置随机种子以保证结果可复现
# (a)
sm_series1 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 24)
rho1 = MA_thm_acf(c(0.7))
r1 = acf_func(sm_series1)
# (b)
sm_series2 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 60)
rho2 = MA_thm_acf(c(0.7))
r2 = acf_func(sm_series2)
# (c)
sm_series3 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 120)
rho3 = MA_thm_acf(c(0.7))
r3 = acf_func(sm_series3)
sm_series3 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 12000)
rho3 = MA_thm_acf(c(0.7))
r3 = acf_func(sm_series3)
source("./sm_series.R") # 导入模拟生成序列的函数
source("./acf_func.R") # 导入计算理论、样本自相关函数
set.seed(666) # 设置随机种子以保证结果可复现
# (a)
sm_series1 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 24)
(rho1 = MA_thm_acf(c(0.7)))
(r1 = acf_func(sm_series1))
# (b)
sm_series2 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 60)
(rho2 = MA_thm_acf(c(0.7)))
(r2 = acf_func(sm_series2))
# (c)
sm_series3 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 120)
(rho3 = MA_thm_acf(c(0.7)))
(r3 = acf_func(sm_series3))
source("./sm_series.R") # 导入模拟生成序列的函数
source("./acf_func.R") # 导入计算理论、样本自相关函数
set.seed(1234) # 设置随机种子以保证结果可复现
# (a)
sm_series1 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 24)
(rho1 = MA_thm_acf(c(0.7)))
(r1 = acf_func(sm_series1))
# (b)
sm_series2 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 60)
(rho2 = MA_thm_acf(c(0.7)))
(r2 = acf_func(sm_series2))
# (c)
sm_series3 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 120)
(rho3 = MA_thm_acf(c(0.7)))
(r3 = acf_func(sm_series3))
source("./sm_series.R") # 导入模拟生成序列的函数
source("./acf_func.R") # 导入计算理论、样本自相关函数
set.seed(1111) # 设置随机种子以保证结果可复现
# (a)
sm_series1 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 24)
(rho1 = MA_thm_acf(c(0.7)))
(r1 = acf_func(sm_series1))
# (b)
sm_series2 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 60)
(rho2 = MA_thm_acf(c(0.7)))
(r2 = acf_func(sm_series2))
# (c)
sm_series3 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 120)
(rho3 = MA_thm_acf(c(0.7)))
(r3 = acf_func(sm_series3))
source("./sm_series.R") # 导入模拟生成序列的函数
source("./acf_func.R") # 导入计算理论、样本自相关函数
set.seed(1111) # 设置随机种子以保证结果可复现
# (a)
sm_series1 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 24)
(rho1 = MA_thm_acf(c(0.7)))
r1 = acf_func(sm_series1)
r1[1]
# (b)
sm_series2 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 60)
(rho2 = MA_thm_acf(c(0.7)))
r2 = acf_func(sm_series2)
r2[1]
# (c)
sm_series3 = ARMA_func(AR_params = NULL,
MA_params = c(0.7),
seq_length = 120)
(rho3 = MA_thm_acf(c(0.7)))
r3 = acf_func(sm_series3)
r3[1]
a=c(1,2,3,4,5,6)
a[3:1]
source("./acf_func.R") # 导入计算理论、样本自相关函数
source("./acf_func.R") # 导入计算理论、样本自相关函数
library(TSA)
data(ar2.s)
pacf_func(ar2.s)
source("./acf_func.R") # 导入计算理论、样本自相关函数
source("./acf_func.R") # 导入计算理论、样本自相关函数
library(TSA)
data(ar2.s)
res=pacf_func(ar2.s)
draw_acf(res)
draw_acf(res)
source("./acf_func.R") # 导入计算理论、样本自相关函数
library(TSA)
data(ar2.s)
res=pacf_func(ar2.s)
draw_acf(res)
source("./acf_func.R") # 导入计算理论、样本自相关函数
library(TSA)
data(ar2.s)
res=pacf_func(ar2.s)
draw_acf(res)
source("./acf_func.R") # 导入计算理论、样本自相关函数
library(TSA)
data(ar2.s)
res=pacf_func(ar2.s)
draw_acf(res)
source("./acf_func.R") # 导入计算理论、样本自相关函数
library(TSA)
data(ar2.s)
res=pacf_func(ar2.s)
source("./acf_func.R") # 导入计算理论、样本自相关函数
library(TSA)
data(ar2.s)
res=pacf_func(ar2.s)
res1=pacf_func_1(ar2.s)
(ref=pacf(ar2.s))
(res=pacf_func(ar2.s))
source("./acf_func.R")
library(TSA)
data(ar2.s)
pcaf_func(ar2.s)
source("./acf_func.R")
library(TSA)
data(ar2.s)
pcaf_func(ar2.s)
source("./acf_func.R")
library(TSA)
data(ar2.s)
pacf_func(ar2.s)
pacf_func_1(ar2.s)
pacf(ar2.s) #书本结果
source("./acf_func.R")
library(TSA)
data(ar2.s)
pacf_func(ar2.s)
pacf_func_1(ar2.s)
pacf(ar2.s)$acf #书本结果
source("./acf_func.R")
library(TSA)
data(ar2.s)
pacf_func(ar2.s)
pacf_func_1(ar2.s)
pacf(ar2.s)$acf #书本结果
